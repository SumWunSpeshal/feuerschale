// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading: 
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

model City {
  Schluesselnummer String
  Stadt            String
  PLZ              String
  Bundesland       String
  Landkreis        String
  id               Int     @id @default(autoincrement()) @db.SmallInt
  Venue            Venue[]
}

model Text {
  id               String      @id @default(cuid())
  name             String
  userId           String
  description      String      @default("")
  slamTextFileName String      @default("")
  user             User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  VenueText        VenueText[]
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  texts         Text[]
  Venue         Venue[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Venue {
  id          Int         @id @default(autoincrement()) @db.SmallInt
  created_at  DateTime?   @default(now()) @db.Timestamptz(6)
  name        String      @unique @default("")
  description String?     @default("")
  userId      String
  cityId      Int         @db.SmallInt
  City        City        @relation(fields: [cityId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  User        User        @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  VenueText   VenueText[]
}

model VenueText {
  id         String    @id @default(cuid())
  created_at DateTime? @default(now()) @db.Timestamptz(6)
  textId     String
  venueId    Int       @db.SmallInt
  Text       Text      @relation(fields: [textId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  Venue      Venue     @relation(fields: [venueId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}
